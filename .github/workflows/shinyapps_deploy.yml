# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help

name: shiny-deploy

# TODO: remove `shiny-server-develop` when we use shinyapps.io as production site
# also consider to change shiny-server-main to main since we will not host in shinyServer
on:
  push:
    branches:
      - main
      - develop
      - feature-auto-generate-config #tmp
    tags:
      - v*.*.*
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '**/*.md'
      - '**/.gitignore'

jobs:
  shiny-deploy:
    runs-on: ubuntu-latest
    # This image seems to be based on rocker/r-ver which in turn is based on debian
    container: rocker/rstudio:4.1.2
    env:
      # This should not be necessary for installing from public repo's however remotes::install_github() fails without it.
      GITHUB_PAT: ${{ secrets.REPO_PAT }}

    steps:
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip python3.8-venv libcurl4-openssl-dev \
            jq curl

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Create and Activate Python Virtual Environment
        shell: bash
        run: |
          python3 -m venv .venv
          chmod 755 .venv/bin/activate
          source .venv/bin/activate

      - name: Install R Packages Dependencies
        run: |
          R -f install-pkgs.R

      - name: Install Schematic
        shell: bash
        run: |
          # has to activate each bash step
          source .venv/bin/activate
          # use 'poetry' to install schematic from the develop branch 
          pip3 install poetry
          # new config for git to fix 'fatal: unsafe repository (Repo is owned by someone else)'
          git config --global --add safe.directory /__w/data_curator/data_curator
          # git clone -b develop https://github.com/Sage-Bionetworks/schematic.git
          git clone https://github.com/Sage-Bionetworks/schematic.git
          cd schematic
          git checkout 7f15d0e3f27360f09f81d9a720b912d54e8f8481
          poetry build
          pip3 install dist/schematicpy-1.0.0-py3-none-any.whl

      - name: Set Configurations for Schematic
        shell: bash
        run: |
          # write out configuration files using github secrets
          echo "${{ secrets.SCHEMATIC_SYNAPSE_CONFIG }}" > .synapseConfig
          echo "${{ secrets.SCHEMATIC_SERVICE_ACCT_CREDS }}" > schematic_service_account_creds.json
          echo "${{ secrets.SCHEMATIC_CREDS_PATH }}" > credentials.json
          echo "${{ secrets.SCHEMATIC_TOKEN_PICKLE }}" | base64 -d > token.pickle

          # TODO: retrieve version of schematic service once API is implemented   

      - name: Set Configurations for Data Model
        run: |
          # retrieve data model repo information
          R -e '
            install.packages("yaml");
            config <- yaml::yaml.load_file("schematic_config.yml");
            repo <- strsplit(config$model$input$repo, "/")[[1]];
            repo_name <- file.path(repo[1], repo[2]);
            path <- config$model$input$location;
            system(sprintf("echo 'MODEL_REPO_NAME=%s' >> $GITHUB_ENV", repo_name));
            system(sprintf("echo 'MODEL_PATH=%s' >> $GITHUB_ENV", path));
            system(sprintf("echo 'MODEL_REPO_BRANCH=%s' >> $GITHUB_ENV", repo[3]));'
          
          # retrieve versions for data model
          echo 'SCHEMA_VERSION='$(
            curl -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/Sage-Bionetworks/schematic/releases/latest | \
            jq -r ".tag_name"
          ) >> $GITHUB_ENV
          echo '${{ env.MODEL_REPO_NAME }}'
          echo '${{ env.MODEL_REPO_BRANCH }}'

      - name: Clone Data Model
        shell: bash
        run: |
          git clone -b ${{ env.MODEL_REPO_BRANCH }} https://github.com/${{ env.MODEL_REPO_NAME }}.git

      - name: Create config.json
        shell: bash
        run: |
          source .venv/bin/activate
          python3 functions/generate_config_json.py \
            -i ${{ env.MODEL_PATH }} \
            -v1 v0.1.0 \
            -v2 ${{ env.SCHEMA_VERSION }} \
            -o www

      - name: zip virtual env
        shell: bash
        # ShinyApps has a limit of 7000 files, far exceeded by the many Python dependencies
        # that this app' has.  As a workaround we zip the virtual environment and later
        # unzip it in 'global.R'
        run: |
          zip -rm .venv.zip .venv

      - name: Authorize and deploy app
        shell: Rscript {0}
        run: |
          # if there is a tag, 'refName' will be tag name
          refName <- Sys.getenv("GITHUB_REF_NAME")
          repo <- Sys.getenv("GITHUB_REPOSITORY")
          appName <- strsplit(repo, "/")[[1]][2]
          # if tag is v*.*.*, deploy to prod, otherwise to staging
          if (!grepl("v[0-9]+.[0-9]+.[0-9]+", refName)) {
            appName <- paste(appName, "staging", sep = "-")
          }
          rsConnectUser <- "${{ secrets.RSCONNECT_USER }}"
          rsConnectToken <- "${{ secrets.RSCONNECT_TOKEN }}"
          rsConnectSecret <- "${{ secrets.RSCONNECT_SECRET }}"

          # create config file
          config <- "CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}"
          config <- c(config, "CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}")
          appUrl <- sprintf("https://%s.shinyapps.io/%s", rsConnectUser, appName)
          config <- c(config, sprintf("APP_URL: %s", appUrl))

          configFileConn <- file("oauth_config.yml")
          tryCatch(
            writeLines(config, configFileConn),
            finally=close(configFileConn)
          )
          rsconnect::setAccountInfo(rsConnectUser, rsConnectToken, rsConnectSecret)
          rsconnect::deployApp(appName = appName)
