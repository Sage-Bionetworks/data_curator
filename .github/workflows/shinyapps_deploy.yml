# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help

name: shiny-deploy

on:
  push:
    branches:
      - shiny-server-main
      - switch-python-venv
      - poetry
      - release*

jobs:
  shiny-deploy:
    runs-on: ubuntu-latest
    # This image seems to be based on rocker/r-ver which in turn is based on debian
    container: rocker/rstudio
    env:
      CONDA_ENV_NAME: virtual_env
      # This should not be necessary for installing from public repo's however remotes::install_github() fails without it.
      GITHUB_PAT: ${{ secrets.REPO_PAT }}

    steps:
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip python3.8-venv libcurl4-openssl-dev
 
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Create and Activate Python Virtual Environment
        shell: bash
        run: |
          python3 -m venv "${{ env.CONDA_ENV_NAME }}"
          chmod 755 "${{ env.CONDA_ENV_NAME }}"/bin/activate
          source "${{ env.CONDA_ENV_NAME }}"/bin/activate
        
      - name: Install Python Dependencies
        shell: bash
        run: |
          source "${{ env.CONDA_ENV_NAME }}"/bin/activate
          # install 'poetry' and then use it to install 'schematic'
          pip3 install poetry
          git clone --single-branch --branch develop https://github.com/Sage-Bionetworks/schematic.git
          cd schematic
          poetry build
          pip3 install dist/schematicpy-1.0.0-py3-none-any.whl
          # This was the old way: pip3 install -r requirements.txt
          # However, per Anthony Williams, "poetry will install all of the dependencies necessary for the app to run"
          #
          # This is to fix the error we otherwise see when the app starts up:
          # No such file or directory: 'tests/data/example.model.jsonld'
          mkdir -p ../tests/data/
          cp -R tests/data/ ../tests/
        
      - name: Install R packages
        run: |
          R -f install-pkgs.R
          
      - name: zip virtual env
        # ShinyApps has a limit of 7000 files, far exceeded by the many Python dependencies
        # that this app' has.  As a workaround we zip the virtual environment and later
        # unzip it in 'global.R'
        shell: bash
        run: |
          zip -r "${{ env.CONDA_ENV_NAME }}".zip "${{ env.CONDA_ENV_NAME }}"
          rm -r "${{ env.CONDA_ENV_NAME }}"
  
      - name: Authorize and deploy app
        shell: Rscript {0}
        run: |
          branch<-Sys.getenv("GITHUB_REF_NAME")
          repo<-Sys.getenv("GITHUB_REPOSITORY")
          appName<-strsplit(repo, "/")[[1]][2]
          if (!startsWith(branch, "release")) {
             appName <- paste(appName, "staging", sep="-")
          }
          rsConnectUser <-"${{ secrets.RSCONNECT_USER }}"
          rsConnectToken <- "${{ secrets.RSCONNECT_TOKEN }}"
          rsConnectSecret <- "${{ secrets.RSCONNECT_SECRET }}"
          
          # create config file
          config <- "CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}"
          config <- c(config, "CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}")
          appUrl<- sprintf("https://%s.shinyapps.io/%s", rsConnectUser, appName)
          config <- c(config, sprintf("APP_URL: %s", appUrl))
          config <- c(config, "CONDA_NAME: ${{ env.CONDA_ENV_NAME }}")
         
          configFileConn<-file("config.yaml")
          tryCatch(
             writeLines(config, configFileConn),
             finally=close(configFileConn)
          )
          rsconnect::setAccountInfo(rsConnectUser, rsConnectToken, rsConnectSecret)
          rsconnect::deployApp(appName = appName)
 