# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help

name: shiny-deploy

# TODO: remove `shiny-server-develop` when we use shinyapps.io as production site
# also consider to change shiny-server-main to main since we will not host in shinyServer
on:
  push:
    branches:
      - develop # add develop for testing for now
    tags:
      - release*
    paths-ignore:
      - .github/ISSUE_TEMPLATE/**

jobs:
  shiny-deploy:
    runs-on: ubuntu-latest
    # This image seems to be based on rocker/r-ver which in turn is based on debian
    container: rocker/rstudio
    env:
      # This should not be necessary for installing from public repo's however remotes::install_github() fails without it.
      GITHUB_PAT: ${{ secrets.REPO_PAT }}

    steps:
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip python3.8-venv libcurl4-openssl-dev
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Create and Activate Python Virtual Environment
        shell: bash
        run: |
          python3 -m venv .venv
          chmod 755 .venv/bin/activate
          source .venv/bin/activate
      - name: Install R Packages Dependencies
        run: |
          R -f install-pkgs.R
      - name: Install Python Packages Dependencies
        shell: bash
        run: |
          source .venv/bin/activate
          pip3 install -r requirements.txt
      - name: Install Schematic
        shell: bash
        run: |
          source .venv/bin/activate
          # use 'poetry' to install schematic from the develop branch 
          pip3 install poetry
          git clone --single-branch --branch develop https://github.com/Sage-Bionetworks/schematic.git
          cd schematic
          poetry build
          pip3 install dist/schematicpy-1.0.0-py3-none-any.whl
      - name: Set Configurations for Schematic
        shell: bash
        run: |
          source .venv/bin/activate
          # download data model to the correct location
          R -e '
            config <- yaml::yaml.load_file(".github/schematic_config.yml");
            url  <- config$model$input$download_url;
            path <- config$model$input$location;
            system(sprintf("mkdir -p %s", dirname(path)));
            system(sprintf("wget %s -O %s", url, path));
          '
          # overwrite the config.yml in schematic
          mv -f .github/schematic_config.yml schematic/config.yml
          # write out configuration files using github secrets
          echo "${{ secrets.SCHEMATIC_SYNAPSE_CONFIG }}" > schematic/.synapseConfig
          echo "${{ secrets.SCHEMATIC_SERVICE_ACCT_CREDS }}" > schematic/schematic_service_account_creds.json
          echo "${{ secrets.SCHEMATIC_CREDS_PATH }}" > schematic/credentials.json
          echo "${{ secrets.SCHEMATIC_TOKEN_PICKLE }}" | base64 -d > schematic/token.pickle
      - name: zip virtual env
        shell: bash
        # ShinyApps has a limit of 7000 files, far exceeded by the many Python dependencies
        # that this app' has.  As a workaround we zip the virtual environment and later
        # unzip it in 'global.R'
        run: |
          zip -rm .venv.zip .venv
      - name: Authorize and deploy app
        shell: Rscript {0}
        run: |
          branch <- Sys.getenv("GITHUB_REF_NAME")
          repo <- Sys.getenv("GITHUB_REPOSITORY")
          appName <- strsplit(repo, "/")[[1]][2]
          if (!startsWith(branch, "release")) {
            appName <- paste(appName, "staging", sep = "-")
          }
          rsConnectUser <- "${{ secrets.RSCONNECT_USER }}"
          rsConnectToken <- "${{ secrets.RSCONNECT_TOKEN }}"
          rsConnectSecret <- "${{ secrets.RSCONNECT_SECRET }}"
          # create config file
          config <- "CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}"
          config <- c(config, "CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}")
          appUrl <- sprintf("https://%s.shinyapps.io/%s", rsConnectUser, appName)
          config <- c(config, sprintf("APP_URL: %s", appUrl))
          configFileConn <- file("oauth_config.yml")
          tryCatch(
            writeLines(config, configFileConn),
            finally=close(configFileConn)
          )
          rsconnect::setAccountInfo(rsConnectUser, rsConnectToken, rsConnectSecret)
          rsconnect::deployApp(appName = appName)
