# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help

name: shiny-deploy

on:
  push:
    branches: [main, develop, feature-auto-generate-config]
    tags: 'v[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '**/*.md'
      - '**/.gitignore'
  workflow_dispatch:
    inputs:
      service_branch:
        description: 'Schematic Service Branch'    
        default: 'develop'
      schema_branch:
        description: 'Schema Branch'    
        default: 'main'

jobs:
  shiny-deploy:
    runs-on: ubuntu-latest
    # This image seems to be based on rocker/r-ver which in turn is based on debian
    container: rocker/rstudio:4.1.2
    env:
      # This should not be necessary for installing from public repo's however remotes::install_github() fails without it.
      GITHUB_PAT: ${{ secrets.REPO_PAT }}
      SERVICE_BRANCH: 'develop'
      SCHEMA_BRANCH: 'main'

    steps:
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip python3.8-venv libcurl4-openssl-dev \
            jq curl

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Create and Activate Python Virtual Environment
        shell: bash
        run: |
          python3 -m venv .venv
          chmod 755 .venv/bin/activate
          source .venv/bin/activate

      - name: Install R Packages Dependencies
        run: |
          R -f install-pkgs.R

      - name: Determine Deployment Environment Variables (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo 'SERVICE_BRANCH=${{ github.event.inputs.service_branch }}' >> $GITHUB_ENV
          echo 'SCHEMA_BRANCH=${{ github.event.inputs.schema_branch }}' >> $GITHUB_ENV
          echo 'APP_URL=staging' >> $GITHUB_ENV
    
      - name: Determine Deployment Environment Variables (pull request)
        if: github.event_name == 'pull_request'
        run: echo 'APP_URL=testing1' >> $GITHUB_ENV

      - name: Determine Deployment Environment Variables (push)
        if: github.event_name == 'push'
        shell: bash
        run: |
          # REF_TYPE will be either heads (branch) or tags
          REF_TYPE="$(echo $GITHUB_REF | cut -d'/' -f 2)"
          if [ $REF_TYPE == 'tags' ]; then
            echo 'APP_URL=production' >> $GITHUB_ENV
          else
            echo 'APP_URL=staging' >> $GITHUB_ENV
          fi

      - name: Install Schematic
        shell: bash
        run: |
          # has to activate each bash step
          source .venv/bin/activate
          # use 'poetry' to install schematic from the develop branch 
          pip3 install poetry
          git clone --single-branch --branch ${{ env.SERVICE_BRANCH }} https://github.com/Sage-Bionetworks/schematic.git
          cd schematic
          poetry build
          pip3 install dist/schematicpy-1.0.0-py3-none-any.whl

      - name: Set Configurations
        shell: bash
        run: |
          echo "${{ secrets.SCHEMATIC_SYNAPSE_CONFIG }}" > config.yml
          echo "${{ secrets.SCHEMATIC_SYNAPSE_CONFIG }}" > .synapseConfig
          echo "${{ secrets.SCHEMATIC_SERVICE_ACCT_CREDS }}" > schematic_service_account_creds.json
          echo "${{ secrets.SCHEMATIC_CREDS_PATH }}" > credentials.json
          echo "${{ secrets.SCHEMATIC_TOKEN_PICKLE }}" | base64 -d > token.pickle
          # retrieve data model repo information
          R -e '
            config <- yaml::yaml.load_file("config.yml");
            system(sprintf("echo 'MODEL_REPO=%s' >> $GITHUB_ENV", config$model$input$repo));
            system(sprintf("echo 'MODEL_PATH=%s' >> $GITHUB_ENV", config$model$input$location));

      - name: Clone Data Model
        shell: bash
        run: |
          git clone --single-branch --branch ${{ env.SCHEMA_BRANCH }} https://github.com/${{ env.SCHEMA_REPO }}.git

      - name: Create config.json
        shell: bash
        run: |
          source .venv/bin/activate
          python3 .github/generate_config_json.py \
            -js ${{ env.MODEL_PATH }} \
            -v1 ${{ env.SERVICE_VERSION }} \
            -v2 ${{ env.SCHEMA_VERSION }} \
            -o www

      - name: zip virtual env
        shell: bash
        # ShinyApps has a limit of 7000 files, far exceeded by the many Python dependencies
        # that this app' has.  As a workaround we zip the virtual environment and later
        # unzip it in 'global.R'
        run: |
          zip -rm .venv.zip .venv

      - name: Authorize and deploy app
        shell: Rscript {0}
        run: |
          # if there is a tag, 'refName' will be tag name
          refName <- Sys.getenv("GITHUB_REF_NAME")
          repo <- Sys.getenv("GITHUB_REPOSITORY")
          appName <- strsplit(repo, "/")[[1]][2]
          # if tag is v*.*.*, deploy to prod, otherwise to staging
          if (!grepl("v[0-9]+.[0-9]+.[0-9]+", refName)) {
            appName <- paste(appName, "staging", sep = "-")
          }
          rsConnectUser <- "${{ secrets.RSCONNECT_USER }}"
          rsConnectToken <- "${{ secrets.RSCONNECT_TOKEN }}"
          rsConnectSecret <- "${{ secrets.RSCONNECT_SECRET }}"

          # create config file
          config <- "CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}"
          config <- c(config, "CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}")
          appUrl <- sprintf("https://%s.shinyapps.io/%s", rsConnectUser, appName)
          config <- c(config, sprintf("APP_URL: %s", appUrl))

          configFileConn <- file("oauth_config.yml")
          tryCatch(
            writeLines(config, configFileConn),
            finally=close(configFileConn)
          )
          rsconnect::setAccountInfo(rsConnectUser, rsConnectToken, rsConnectSecret)
          rsconnect::deployApp(appName = appName)
